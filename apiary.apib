FORMAT: 1A
HOST: https://identity.tokenbrowser.com/

# Identity Service

This service stores user identities and information associated with those users. Users can be looked up by `uuid` or `username`.

In the long run, we would like to migrate this service to a decentalized identity service on the blockchain (using something like Blockstack, uPort, or others). We are still researching the best options.

# Generating signatures

When registering a new user and updating profile information, the user must sign the request `payload` to prove ownership of the associated ethereum address.

Signatures are generated in the same way as Ethereum transaction signatures are.

The source data for the signature is the json representation of the `payload` with all keys sorted by name, and all non-value whitespace removed.

e.g.

    {
        "timestamp": 1480078657.293965,
        "profile": {
            "name": "Mr Tester",
            "avatar": "https://s3.amazonaws.com/testuser/profile.jpg"
        }
    }

becomes

    {"profile":{"avatar":"https://s3.amazonaws.com/testuser/profile.jpg","name":"Mr Tester"},"timestamp":1480078657.293965}

This data is then SHA3 Hashed (Keccak-256) and signed with the owners private key using recoverable ECDSA. Finally the resulting signature is serialised and converted to a hex string.
*TODO*: find/write more detailed documentation for these things.

# Errors

All error messages will return both machine (`id`) and human readable (`message`) error message. All errors, except validation_error, return only one error. Some errors will also have an optional link to the documentation (url).

validation_error with status code 400 is returned when the validation of the resource fails on POST or PUT requests. Response contains errors field with a list of errors.

Important: Different error types (id) can be added and removed over time so you should make sure your application accepts new ones as well.

+ Example 404 (application/json)

        {
            "errors": [
                {
                    "id": "not_found",
                    "message": "Not found"
                }
        }


## User [/users/{username}]

A User object has the following attributes:

+ version - format of the user's profile data
+ username - with format `^[a-z0-9_]{1,60}$`
+ owner_address - ethereum address associated with the private key the user is using for identification
+ profile - user specified profile data

+ Parameters
    + username: 1 (required, string) - username of the user

### Register a user [POST]

Used to register a new username and associate it with an ethereum address.
The address is extracted from the signature.

+ Request (application/json)

        {
            "payload": {
                "profile": {"name": "Mr Tester"},
                "timestamp": 1480077346.786651,
                "username": "testuser"
            },
            "signature": "0xc39a479a92fe8d626324ff82a33684610ecd6b50714f59542a1ea558220ec6246a9193dd481078417b3b44d55933989587459d3dd50295d4da67d6580ac8646801"
        }

+ Response 200 (application/json)

        {
            "version": "1",
            "owner_address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "username": "testuser",
            "profile": {
                "name": "Mr Tester"
            }
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_signature",
                    "message": "Invalid Signature"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "username_taken",
                    "message": "Requested username is already taken"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "missing_arguments",
                    "message": "Missing arguments"
                }
            ]
        }

### Get a Users info [GET]

+ Response 200 (application/json)

        {
            "version": "1",
            "owner_address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "username": "testuser",
            "profile": {
                "name": "Mr Tester"
            }
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "id": "not_found",
                    "message": "Not found"
                }
        }

### Update a user [PUT]

Allows the user to update their profile

+ Request (application/json)

        {
            "payload": {
                "profile": {
                    "name": "Mr Tester",
                    "avatar": "https://s3.amazonaws.com/testuser/profile.jpg"
                },
                "timestamp": 1480078657.293965,
            },
            "signature": "0x3c8a8d1ce2fb175ded6489e0d811654871f2dc533d6726c5fa3e34c5e85c4458367c7cf8d1810b54ff44cfd2e09bbf0500920633765de886dc51cbf5bc09a89d00"
        }

+ Response 200 (application/json)

        {
            "version": "1",
            "owner_address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "username": "testuser",
            "profile": {
                "avatar": "https://s3.amazonaws.com/testuser/profile.jpg"
                "name": "Mr Tester"
            }
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "id": "not_found",
                    "message": "Not found"
                }
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_signature",
                    "message": "Invalid Signature"
                }
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "missing_arguments",
                    "message": "Missing arguments"
                }
            ]
        }
