FORMAT: 1A
HOST: https://token-identity-service.herokuapp.com/

# Identity Service

This service stores user identities and information associated with those users. Users can be looked up by `uuid` or `username`.

In the long run, we would like to migrate this service to a decentalized identity service on the blockchain (using something like Blockstack, uPort, or others). We are still researching the best options.


## User [/users/{username}]

A User object has the following attributes:

+ version - format of the user's profile data
+ uuid - unique ID
+ username - with format `^[a-z0-9_]{1,60}$`
+ created_at - An ISO8601 timestamp
+ updated_at - An ISO8601 timestamp
+ url - resource url
+ key_type
+ public_key
+ payload - user defined, users can store any custom parameters here

+ Parameters
    + username: 1 (required, string) - username of the user

### Create a user [POST]
### Get a Users info [GET]

+ Response 200 (application/json)

        {
            "version": "v1",
            "uuid": "123e4567-e89b-12d3-a456-426655440000",
            "username": "testuser",
            "created_at": "2014-11-11T08:40:51.620Z",
            "updated_at": "2014-11-11T08:40:51.620Z",
            "url": "/users/123e4567-e89b-12d3-a456-426655440000",
            "key_type": "ethereum",
            "public_key": "0xd0A01BFA253c29BD5B4D591c8d956Ad0361554bA",
            "payload": {
                "a": "b"
            }
        }
        
+ Response 404 (application/json)

        {
            "errors": [
                {
                    "id": "not_found",
                    "message": "Not found"
                }
        }

### Update a user [PUT]
### Update a user's key [PUT]


## Todo

* complete error handling docs with table of return codes, error types etc
* describe how signing of payload and timestamps work when updating user (can copy some of this from Tristan's [original version](https://github.com/tokenbrowser/id-service/commit/ffe290a3423711c943ad52e21369a63ced9cf64e)) 

## Errors

All error messages will return both machine (`id`) and human readable (`message`) error message. All errors, except validation_error, return only one error. Some errors will also have an optional link to the documentation (url).

validation_error with status code 400 is returned when the validation of the resource fails on POST or PUT requests. Response contains errors field with a list of errors.

Important: Different error types (id) can be added and removed over time so you should make sure your application accepts new ones as well.

+ Example 404 (application/json)

        {
            "errors": [
                {
                    "id": "not_found",
                    "message": "Not found"
                }
        }