FORMAT: 1A
HOST: https://token-id-service.herokuapp.com

# Token Identity Service

This service stores user identities and information associated with those users. Users can be looked up by `uuid` or `username`.

In the long run, we would like to migrate this service to a decentalized identity service on the blockchain (using something like Blockstack, uPort, or others). We are still researching the best options.


# Group Users
## User Registration [/v1/user]

Used to register a new username and associate it with an ethereum address.
The address is extracted from the signature.

### Register a user [POST]

+ Request (application/json)

    The custom payload is optional, and can be used to hold extra information about a user. The username filed is optional; if no username is provided one will be generated for the user.

    + Headers

        Token-ID-Address: 0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a
        Token-Signature: 0xc39a479a92fe8d626324ff82a33684610ecd6b50714f59542a1ea558220ec6246a9193dd481078417b3b44d55933989587459d3dd50295d4da67d6580ac8646801
        Token-Timestamp: 1480077346

    + Body
    
        {
            "custom": {
                "about": "I'm a digital Dingus",
                "location": "Oslo, Norway",
                "payment_address": "0xWalletAddressForReceivingFunds"
            },
            "username": "testuser",
        }

+ Response 200 (application/json)

        {
            "owner_address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "username": "testuser",
            "custom": {
                "name": "Mr Tester"
            }
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "already_registered",
                    "message": "The provided address is already registered"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_signature",
                    "message": "Invalid Signature"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_timestamp",
                    "message": "The difference between the timestamp and the current time is too large"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "missing_arguments",
                    "message": "Missing arguments"
                }
            ]
        }

### Register a user without providing a username [POST]

+ Request (application/json)

    + Headers

        Token-ID-Address: 0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a
        Token-Signature: 0xc39a479a92fe8d626324ff82a33684610ecd6b50714f59542a1ea558220ec6246a9193dd481078417b3b44d55933989587459d3dd50295d4da67d6580ac8646801
        Token-Timestamp: 1480077346

+ Response 200 (application/json)

        {
            "owner_address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "username": "testuser",
            "custom": None
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "username_taken",
                    "message": "Requested username is already taken"
                }
            ]
        }

### Update a user [PUT]

+ Request (application/json)

    + Headers

        Token-ID-Address: 0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a
        Token-Signature: 0xc39a479a92fe8d626324ff82a33684610ecd6b50714f59542a1ea558220ec6246a9193dd481078417b3b44d55933989587459d3dd50295d4da67d6580ac8646801
        Token-Timestamp: 1480077346

    + Body

        {
            "username": "username",
            "custom": {
                "name": "Test User"
            }
        }

+ Response 200 (application/json)

        {
            "owner_address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "username": "testuser",
            "custom": {
                "name": "Test User"
            }
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_signature",
                    "message": "Invalid Signature"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "missing_arguments",
                    "message": "Missing arguments"
                }
            ]
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "username_taken",
                    "message": "Requested username is already taken"
                }
            ]
        }

## User Retrieval/Update [/v1/user/{username}]

+ Parameters
    + username: 1 (required, string) - username of the user

### Get a User's info [GET]

+ Response 200 (application/json)

        {
            "owner_address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "username": "testuser",
            "custom": {
                "name": "Mr Tester"
            }
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "id": "not_found",
                    "message": "Not found"
                }
        }

### Update a user [PUT]

Allows the user to update their profile

+ Request (application/json)

    + Headers

        Token-ID-Address: 0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a
        Token-Signature: 0xc39a479a92fe8d626324ff82a33684610ecd6b50714f59542a1ea558220ec6246a9193dd481078417b3b44d55933989587459d3dd50295d4da67d6580ac8646801
        Token-Timestamp: 1480077346

    + Body

        {
            "custom": {
                "name": "Mr Tester",
                "avatar": "https://s3.amazonaws.com/testuser/profile.jpg"
            }
        }

+ Response 200 (application/json)

        {
            "owner_address": "0x676f7cb80c9ff6a55e8992d94bac9a3212282c3a",
            "username": "testuser",
            "custom": {
                "avatar": "https://s3.amazonaws.com/testuser/profile.jpg"
                "name": "Mr Tester"
            }
        }

+ Response 404 (application/json)

        {
            "errors": [
                {
                    "id": "not_found",
                    "message": "Not found"
                }
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "invalid_signature",
                    "message": "Invalid Signature"
                }
        }

+ Response 400 (application/json)

        {
            "errors": [
                {
                    "id": "missing_arguments",
                    "message": "Missing arguments"
                }
            ]
        }


# Group Utils

## Timestamp generation [/v1/timestamp]

Used to retrieve a current timestamp from the server for use in signing other requests.

### Get Timestamp [GET]

+ Response 200 (application/json)

        {
            "timestamp": 1481291348
        }


# Group Search
## User [/v1/search/user/{?query,offset,limit}]
### Search by partial username [GET]
+ Parameters
    + query: `moxiemarl` (string, required) - Partial username to match on
      Matches on usernames using Postgres LIKE operator
    + offset: `80` (integer, optional) - Paging offset
      + Default: `0`
    + limit: `20` (integer, optional) - Page size
      + Default: `10`

+ Request
    + Headers
            Accept: application/json

+ Response 200 (application/json)
  + Body

    {
      'limit': 10,
      'offset': 0,
      'results': [
        {
          'custom': None,
          'username': 'bobsmith',
          'owner_address': '0x056db290f8ba3250ca64a45d16284d04bc6f5fbf'
        }
      ],
      'query': 'obsm'
    }




# Group Usage Notes

## Errors

All error messages will return both machine (`id`) and human readable (`message`) error message. All errors, except validation_error, return only one error. Some errors will also have an optional link to the documentation (url).

validation_error with status code 400 is returned when the validation of the resource fails on POST or PUT requests. Response contains errors field with a list of errors.

Important: Different error types (id) can be added and removed over time so you should make sure your application accepts new ones as well.

+ Example 404 (application/json)

    {
      "errors": [
        {
          "id": "not_found",
          "message": "Not found"
        }
      ]
    }

## User Object

A User object has the following attributes:

* username - with format `^[a-zA-Z][a-zA-Z0-9_]{2,59}$`
* owner_address - ethereum address associated with the private key the user is using for identification
* profile - user specified profile data
